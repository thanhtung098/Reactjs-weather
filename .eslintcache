[{"D:\\Reactjs\\my-weather\\src\\index.js":"1","D:\\Reactjs\\my-weather\\src\\App.js":"2","D:\\Reactjs\\my-weather\\src\\reportWebVitals.js":"3","D:\\Reactjs\\my-weather\\src\\Api.js":"4","D:\\Reactjs\\my-weather\\src\\Api-tide.js":"5","D:\\Reactjs\\my-weather\\src\\data.js":"6","D:\\Reactjs\\my-weather\\src\\components\\Header.js":"7","D:\\Reactjs\\my-weather\\src\\components\\Chart.js":"8","D:\\Reactjs\\my-weather\\src\\components\\nowWeather.js":"9","D:\\Reactjs\\my-weather\\src\\components\\weatherNextdays.js":"10","D:\\Reactjs\\my-weather\\src\\components\\itemDay.js":"11","D:\\Reactjs\\my-weather\\src\\components\\map.js":"12"},{"size":500,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":11299,"mtime":1612345681729,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":232,"mtime":1611632993353,"results":"17","hashOfConfig":"14"},{"size":148,"mtime":1611219328339,"results":"18","hashOfConfig":"14"},{"size":9026,"mtime":1611626760862,"results":"19","hashOfConfig":"14"},{"size":879,"mtime":1612152589768,"results":"20","hashOfConfig":"14"},{"size":1646,"mtime":1612348756385,"results":"21","hashOfConfig":"14"},{"size":2322,"mtime":1612322961781,"results":"22","hashOfConfig":"14"},{"size":829,"mtime":1612338455309,"results":"23","hashOfConfig":"14"},{"size":1197,"mtime":1611736309550,"results":"24","hashOfConfig":"14"},{"size":3162,"mtime":1612349452892,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"4hr6bu",{"filePath":"29","messages":"30","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"28"},"D:\\Reactjs\\my-weather\\src\\index.js",[],["58","59"],"D:\\Reactjs\\my-weather\\src\\App.js",["60","61","62","63","64","65","66","67","68"],"\nimport './App.css';\nimport React, { Component } from 'react';\n// import tide from './Api-tide.js';\nimport data from './data.js';\nimport Chart from './components/Chart.js';\nimport Header from './components/Header'\nimport WeatherNextdays from './components/weatherNextdays'\nimport MapWeather from './components/map'\nimport './components/loading.css'\n\nimport api from './Api.js'\nclass App extends Component {\n  // state = {\n  //   tranlateX: 0,\n  //   coorY: 120,\n    // hours: 0,\n  //   initPsTie: 1,\n  //   setTranlateTide: 720,\n  //   dataCurrent: ''\n  // }\n  constructor(props) {\n    super(props);\n    this.state = {\n      tranlateX: 0,\n      coorY: 120,\n      hours: 0,\n      initPsTie: 1,\n      setTranlateTide: 720,\n      dataCurrent: [],\n      dataNextDays: [],\n      dataWeatherLocation: [],\n      session: 'morning',\n      arrayDataCondition: {}\n    }\n    this.getDataCondition = this.getDataCondition.bind(this)\n }\n  drawLineSun = async () => {\n    const canvas = document.getElementById('canvas');\n    const ctx = canvas.getContext('2d');\n    canvas.width = 2000;\n    canvas.height = 140;\n    let start = { x: 0, y: 120 };\n    let cp1 = { x: 0, y: 120 };\n    let cp2 = { x: 105, y: 120 };\n    let end = { x: 210, y: 120 };\n    ctx.beginPath();\n    ctx.font = '11px Arial';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = 'red'; \n    ctx.fillText('0:00 AM', 20, 135); \n    ctx.fillText('7:00 AM', 210, 135);\n    ctx.fillText('7:00 PM', 570, 135);\n    ctx.fillText('0:00 AM', 720, 135);\n    ctx.fillText('7:00 AM', 930, 135);\n    ctx.fillText('7:00 PM', 1290, 135);\n    ctx.fillText('7:00 AM', 1660, 135);\n    ctx.setLineDash([5, 4]);\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = '#faa23e';\n    ctx.moveTo(start.x, start.y);\n    ctx.bezierCurveTo(cp1.x, cp1.y, cp2.x, cp2.y, end.x, end.y);\n    ctx.bezierCurveTo(210, 120, 390, -140, 570, 120);\n    ctx.bezierCurveTo(570, 120, 720, 120, 930, 120);\n    ctx.bezierCurveTo(930, 120, 1110, -140, 1290, 120);\n    ctx.bezierCurveTo(1290, 120, 1470, 120, 1660, 120);\n    ctx.stroke();\n    ctx.fillStyle = \"#aae1f6\";\n    ctx.fillRect(cp1.x, cp1.y - 9, 210, 10);\n    ctx.fillRect(570, 120 - 9, 360, 10);\n    ctx.fillRect(1290, 120 - 9, 370, 10);\n\n\n  }\n  drawLineTideChart = async () => {\n    const canvas = document.getElementById('canvas-tide');\n    const ctx = canvas.getContext('2d');\n    canvas.width = 8000;\n    canvas.height = 130;\n    ctx.beginPath();\n    ctx.setLineDash([0]);\n    let arrayTide = []\n    arrayTide = data.item\n    ctx.beginPath();\n    ctx.lineWidth = 1.5;\n    ctx.strokeStyle = '#0979ab';\n    ctx.lineJoin = \"round\";\n    ctx.moveTo(0, 130);\n    let dateStart = this.getDay(arrayTide[0].dt)\n    arrayTide.map((data) => {\n      let distanceDayP1 = this.getDay(data.dt) - dateStart\n      data.x = (720 * distanceDayP1) + this.getMinutes(data.dt, 'degree')\n      data.y = this.checkCoorTide(data.height)\n      data.hour = this.getMinutes(data.dt, 'hour')\n    })\n    var m = 0;\n    var dx1 = 0;\n    var dy1 = 0;\n    let f = 0.3\n    let t = 1\n    let dx2 = 0\n    let dy2 = 0\n    var preP = arrayTide[0];\n    let setTranlateX;\n    for (var i = 0; i < arrayTide.length; i++) {\n      if (dateStart === this.getDay(arrayTide[i].dt)) {\n        setTranlateX = this.getMinutes(arrayTide[i].dt,'degree')\n      }\n      var curP = arrayTide[i];\n      let nexP = arrayTide[i + 1];\n      if (nexP) {\n        m = this.gradient(preP, nexP);\n        dx2 = (nexP.x - curP.x) * -f;\n        dy2 = dx2 * m * t;\n      } else {\n        dx2 = 0;\n        dy2 = 0;\n      }\n      ctx.font = '12px Arial';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillStyle = \"#ffd8f5\";\n      ctx.fillRect(curP.x - 34, curP.y - 44, 70, 34);\n      ctx.font = '10px Arial';\n      ctx.fillStyle = \" #0478a7\";\n      ctx.textAlign = 'center';\n      ctx.fillText(curP.hour, curP.x, curP.y - 18);\n      ctx.stroke();\n      ctx.font = 'bold 14px Arial';\n      ctx.fillText(curP.height + 'm', curP.x, curP.y - 31);\n      ctx.stroke();\n      ctx.fillStyle = \"#aae1f6\";\n      ctx.bezierCurveTo(preP.x - dx1, preP.y - dy1, curP.x + dx2, curP.y + dy2, curP.x, curP.y);\n      dx1 = dx2;\n      dy1 = dy2;\n      preP = curP;\n      if (i == arrayTide.length - 1) {\n        ctx.bezierCurveTo(preP.x - dx1, preP.y - dy1, curP.x + dx2, curP.y + dy2, curP.x, 130 - curP.y);\n      }\n    }\n    this.setState({ setTranlateTide: setTranlateX })\n    ctx.fill();\n  }\n  gradient = (a, b) => {\n    return (b.y - a.y) / (b.x - a.x);\n  }\n  checkCoorTide = (b) => {\n    let y\n    y = 130 - (b * 32)\n    return y\n  }\n  getDay = (unix_timestamp) => {\n    var date = new Date(unix_timestamp * 1000);\n    let getday = date.getDate()\n    return getday\n  }\n  getMinutes = (unix_timestamp, q) => {\n    var date = new Date(unix_timestamp * 1000);\n    let hour = date.getHours()\n    let session = 'AM'\n    if(hour > 12) {\n      hour = hour - 12\n      session = 'PM'\n    }\n    let getMinutes = date.getMinutes()\n    let minutes = (date.getHours() * 60) + getMinutes\n    let hourMinutes = hour + ':' + getMinutes + ' ' + session\n    if(q == 'degree') return (minutes / 2)\n    if(q == 'hour') return hourMinutes\n  }\n  getBezierXY = (t, sx, sy, cp1x, cp1y, cp2x, cp2y, ex, ey) => {\n    return {\n      x: Math.pow(1 - t, 3) * sx + 3 * t * Math.pow(1 - t, 2) * cp1x\n        + 3 * t * t * (1 - t) * cp2x + t * t * t * ex,\n      y: Math.pow(1 - t, 3) * sy + 3 * t * Math.pow(1 - t, 2) * cp1y\n        + 3 * t * t * (1 - t) * cp2y + t * t * t * ey\n    };\n  }\n  getTimeNow =  () => {\n    let dateNow = new Date()\n    if(dateNow.getHours() > 12){\n      this.setState({session: 'afternoon'})\n    }\n    if(dateNow.getHours() > 19){\n      this.setState({session: 'night'})\n    }\n  }\n\n  handleScroll = () => {\n    const el = document.getElementById('block-sun-line');\n    let time = 0.001\n    let coor = {\n      x: 0,\n      y: 0\n    }\n    if (el.scrollLeft <= 210 && el.scrollLeft >= 1) {\n      time = (el.scrollLeft) / 210\n      coor = this.getBezierXY(time, 0, 120, 0, 120, 105, 120, 210, 120)\n      this.setState({ tranlateX: coor.x, coorY: coor.y })\n    }\n    if (el.scrollLeft <= 570 && el.scrollLeft > 210) {\n      time = (el.scrollLeft - 210) / 360\n      coor = this.getBezierXY(time, 210, 120, 210, 120, 390, -140, 570, 120)\n      this.setState({ tranlateX: coor.x, coorY: coor.y })\n    }\n    if (el.scrollLeft <= 930 && el.scrollLeft > 570) {\n      time = (el.scrollLeft - 570) / 360\n      coor = this.getBezierXY(time, 570, 120, 570, 120, 720, 120, 930, 120)\n      this.setState({ tranlateX: coor.x, coorY: coor.y })\n    }\n    if (el.scrollLeft <= 1290 && el.scrollLeft > 930) {\n      time = (el.scrollLeft - 930) / 360\n      coor = this.getBezierXY(time, 930, 120, 930, 120, 1110, -140, 1290, 120)\n      this.setState({ tranlateX: coor.x, coorY: coor.y })\n    }\n    if (el.scrollLeft <= 1660 && el.scrollLeft > 1290) {\n      time = (el.scrollLeft - 1290) / 360\n      coor = this.getBezierXY(time, 1290, 120, 1290, 120, 1470, 120, 1660, 120)\n      this.setState({ tranlateX: coor.x, coorY: coor.y })\n\n    }\n  }\n  \n  componentDidMount = () => { \n    this.getTimeNow()\n\n    this.getAPIweather()\n    this.getAPIweatherLocation()\n    this.drawLineSun()\n    this.drawLineTideChart()\n    window.addEventListener('scroll', this.handleScroll, true);\n  }\n  getAPIweatherLocation = async () => {\n\n    let arrayDataWeatherLocation = []\n    const topWeather = await api.get('forecast.json',{\n      params: {\n        q: '1.391667, 103.894444',\n        days: '3'\n      }\n    })\n    const bottomWeather = await api.get('forecast.json',{\n      params: {\n        q: '1.291667, 103.85',\n        days: '3'\n      }\n    })\n    const leftWeather = await api.get('forecast.json',{\n      params: {\n        q: '1.328883, 103.739947',\n        days: '3'\n      }\n    })\n    const rightWeather = await api.get('forecast.json',{\n      params: {\n        q: '1.349592, 103.956789',\n        days: '3'\n      }\n    })\n    const centerWeather = await api.get('forecast.json',{\n      params: {\n        q: '1.391667, 103.894444',\n        days: '3'\n      }\n    })\n    arrayDataWeatherLocation.push({topWeather: {morning:topWeather.data.forecast.forecastday[0].hour[7].condition,afternoon:topWeather.data.forecast.forecastday[0].hour[15].condition, night:topWeather.data.forecast.forecastday[0].hour[22].condition}})\n    arrayDataWeatherLocation.push({bottomWeather: {morning:topWeather.data.forecast.forecastday[0].hour[7].condition,afternoon:topWeather.data.forecast.forecastday[0].hour[15].condition, night:topWeather.data.forecast.forecastday[0].hour[22].condition}})\n    arrayDataWeatherLocation.push({leftWeather: {morning:topWeather.data.forecast.forecastday[0].hour[7].condition,afternoon:topWeather.data.forecast.forecastday[0].hour[15].condition, night:topWeather.data.forecast.forecastday[0].hour[22].condition}})\n    arrayDataWeatherLocation.push({rightWeather:{morning:topWeather.data.forecast.forecastday[0].hour[7].condition,afternoon:topWeather.data.forecast.forecastday[0].hour[15].condition, night:topWeather.data.forecast.forecastday[0].hour[22].condition}})\n    arrayDataWeatherLocation.push({centerWeather:{morning:centerWeather.data.forecast.forecastday[0].hour[7].condition,afternoon:topWeather.data.forecast.forecastday[0].hour[15].condition, night:topWeather.data.forecast.forecastday[0].hour[22].condition}})\n    \n    this.setState({dataWeatherLocation: arrayDataWeatherLocation})\n    let val = 'morning'\n    this.getDataCondition(this.state.session)\n  }\n  getDataCondition  = async (val) => {\n    let arrayDataCondition = {}\n    this.setState({session: val})\n    this.state.dataWeatherLocation.map((data) => {\n      if(data.topWeather) {\n        arrayDataCondition.top = data.topWeather[val]\n      }\n      if(data.bottomWeather) {\n        arrayDataCondition.bottom = data.bottomWeather[val]\n      }\n      if(data.leftWeather) {\n        arrayDataCondition.left = data.leftWeather[val]\n      }\n      if(data.rightWeather) {\n        arrayDataCondition.right = data.rightWeather[val]\n      }\n      if(data.centerWeather) {\n        arrayDataCondition.center = data.centerWeather[val]\n      }\n    })\n    this.setState({arrayDataCondition: arrayDataCondition})\n  }\n  alert = () => {\n    console.log(1)\n  }\n  getAPIweather = async () => {\n    const respone = await api.get('forecast.json',{\n      params: {\n        q:'singapore',\n        days: '3'\n      }\n    })\n    console.log(respone.data.current)\n    this.setState({dataNextDays: respone.data.forecast.forecastday,dataCurrent: respone.data.current})\n  }\n  \n  render() {\n    return (\n      <div className=\"container-page\">\n        <Header dataCurrent = {this.state.dataCurrent}/>\n        <Chart \n          tranlateX={this.state.tranlateX} \n          setTranlateTide= {this.state.setTranlateTide}\n          hours= {this.state.hours}\n          coorY= {this.state.coorY}\n        />\n        <MapWeather  \n          alert = {this.alert}\n          getDataCondition = {this.getDataCondition}\n          session = {this.state.session}\n          dataNextDays={this.state.dataNextDays}\n          arrayDataCondition = {this.state.arrayDataCondition}>\n        </MapWeather>\n        <WeatherNextdays \n        dataNextDays={this.state.dataNextDays}\n        \n        ></WeatherNextdays>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n\n","D:\\Reactjs\\my-weather\\src\\reportWebVitals.js",[],"D:\\Reactjs\\my-weather\\src\\Api.js",[],"D:\\Reactjs\\my-weather\\src\\Api-tide.js",["69"],"D:\\Reactjs\\my-weather\\src\\data.js",[],"D:\\Reactjs\\my-weather\\src\\components\\Header.js",["70"],"import React from 'react';\r\nimport NowWeather from './nowWeather.js'\r\n\r\nimport './header.css'\r\nconst Header = (dataCurrent) => {\r\n    return (\r\n        <div className=\"top-content\">\r\n            <header>\r\n                <div className=\"toggle-bar\">\r\n                    <span className=\"icon-bar\"></span>\r\n                    <span className=\"icon-bar\"></span>\r\n                    <span className=\"icon-bar\"></span>\r\n                </div>\r\n                <div className=\"block-location\">\r\n                    <p>myENV</p>\r\n                    <span>Singapore</span>\r\n                </div>\r\n                <div className=\"block-icon\">\r\n                    <img src=\"../bell.png\" />\r\n                </div>\r\n            </header>\r\n           \r\n        <NowWeather dataCurrent= {dataCurrent.dataCurrent}></NowWeather>\r\n        \r\n        </div>\r\n    )\r\n}\r\nexport default Header","D:\\Reactjs\\my-weather\\src\\components\\Chart.js",["71","72","73"],"import React from 'react';\r\nimport './Chart.css'\r\nconst Chart = ({tranlateX, setTranlateTide,hours,coorY}) => {\r\n    let x = tranlateX;\r\n    const y = 0;\r\n    const c = setTranlateTide;\r\n    let styles = {\r\n        transform: `translate(-${x}px, ${y}px)`\r\n    };\r\n    const stylesTranlateTide = {\r\n        transform: `translate(-${520}px, ${y}px)`\r\n    };\r\n    let dateNow = new Date()\r\n    let getHour = 0, minutes = 0\r\n    getHour = Math.floor((tranlateX * 2) / 60)\r\n    minutes = Math.round(tranlateX % 60);\r\n    let timeAmPm\r\n    timeAmPm = getHour + ' : ' + minutes + ' AM'\r\n    if (getHour > 12) {\r\n        timeAmPm = (getHour - 12) + ' : ' + minutes + ' PM'\r\n    }\r\n    \r\n    return (\r\n        <div className=\"chart-content\">\r\n            <ul className=\"breadcrumb\">\r\n              <li>Tide</li>\r\n              <li>Sunrise & sunset</li>\r\n            </ul>\r\n            <div className=\"block-canvas-linesun\">\r\n            <div className=\"block-sun-line\" id=\"block-sun-line\">\r\n                <div className=\"set-scroll\">a</div>\r\n            </div>\r\n            <div className=\"ctent-sun-line\" style={styles}>\r\n                <canvas id=\"canvas-tide\" style={stylesTranlateTide}></canvas>\r\n                <canvas id=\"canvas\"></canvas>\r\n            </div>\r\n            <div className=\"time-of-day\">\r\n                <span>{timeAmPm}</span>\r\n            </div>\r\n            <div className=\"block-icon-sun\">\r\n                <div className=\"icon-sun\" style={{ top: coorY - 18 }}>\r\n                <img src=\"../sun-line-icon.png\" />\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Chart","D:\\Reactjs\\my-weather\\src\\components\\nowWeather.js",["74","75","76","77"],"import React from 'react';\r\n\r\nconst NowWeather = (dataCurrent) => {\r\n    let dataCondition\r\n    if(dataCurrent.dataCurrent && dataCurrent.dataCurrent != \"\") {\r\n        dataCondition = dataCurrent.dataCurrent\r\n    } else {\r\n        return (\r\n            <div className=\"ml-loader\">\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n            </div>  \r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"now-weather\">\r\n                <div className=\"icon-windy\"><img src={dataCondition.condition.icon} /></div>\r\n                <div className=\"status-weather\">\r\n                    {dataCondition.condition.text}\r\n                </div>\r\n                <div className=\"temp-weather-percent\">\r\n                    <span className=\"temp-text\"><img src=\"../thermometer.png\" />{dataCondition.temp_c} &#8451; </span>\r\n                    <span className=\"temp-text-humidity\"><img src=\"../humidity.png\" />{dataCondition.humidity} % </span>\r\n                </div>\r\n            </div>\r\n            <div className=\"list-function\">\r\n            <ul>\r\n                <li>\r\n                    <span>PSI</span>\r\n                    <span>{dataCondition.pressure_in}</span>\r\n                </li>\r\n                <li>\r\n                    <span>FEELLIKE</span>\r\n                    <span>{dataCondition.feelslike_c}</span>\r\n                </li>\r\n                <li>\r\n                    <span>CLOUD</span>\r\n                    <span>{dataCondition.cloud}</span>\r\n                </li>\r\n                <li>\r\n                    <span>UV</span>\r\n                    <span>{dataCondition.uv}</span>\r\n                </li>\r\n                <li>\r\n                    <span>WIND</span>\r\n                    <span>{dataCondition.wind_kph}</span>\r\n                </li>\r\n                <li>\r\n                    <span>WIND DIRECTION</span>\r\n                    <span>{dataCondition.wind_dir}</span>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NowWeather",["78","79"],"D:\\Reactjs\\my-weather\\src\\components\\weatherNextdays.js",[],"D:\\Reactjs\\my-weather\\src\\components\\itemDay.js",["80","81","82"],"import React from 'react';\r\n\r\nconst ItemDays = (item) => {\r\n    let itemDay = item.item\r\n    let dateNow = new Date(itemDay.date) + ''\r\n    let arr = dateNow.split(' ')\r\n    return (\r\n        <div className=\"item-day\">\r\n            <div className=\"block-date-txt\">\r\n                <div className=\"icon-weather\">\r\n                    <h1>{arr[0]}</h1>\r\n                    <img src={itemDay.day.condition.icon} />\r\n                </div>\r\n            </div>\r\n            <div className=\"description-txt\">\r\n                \r\n                <div className=\"temp-wind\">\r\n                    <h3>{itemDay.day.condition.text}</h3>\r\n                    <span>\r\n                        <img src=\"../icon-item.png\" />\r\n                    {itemDay.day.mintemp_c} \r\n                    - \r\n                    {itemDay.day.maxtemp_c} &#8451;\r\n                    </span>\r\n                    <span>\r\n                    <img src=\"../icon-wind-blue.png\" />\r\n                    {itemDay.day.maxwind_mph} \r\n                    - \r\n                    {itemDay.day.maxwind_kph} km/h\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ItemDays","D:\\Reactjs\\my-weather\\src\\components\\map.js",["83","84","85","86","87","88","89","90","91"],"import React from 'react';\r\nconst MapWeather = ({arrayDataCondition,dataNextDays,getDataCondition,session}) => {\r\n    let dataCurrent\r\n    let objDataCondition\r\n    if(dataNextDays.length > 0 && Object.keys(arrayDataCondition).length !== 0) {\r\n        dataCurrent = dataNextDays[0]\r\n        objDataCondition = arrayDataCondition\r\n    } else {\r\n        return (\r\n            <div className=\"ml-loader\">\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n            </div>  \r\n        )\r\n    }\r\n    return (\r\n        <div className=\"ctent-map\">\r\n                <img src=\"../map-singapo.jpg\" />\r\n                <div className=\"body-map\">\r\n                    <div className=\"status-weather\">\r\n                        <p>24-hour Forecast</p>\r\n                         <div className=\"list-current-status\">\r\n                            <span><img src=\"../thermometer.png\" /> Temp <br/>{dataCurrent.day.mintemp_c } - {dataCurrent.day.maxtemp_c } &#8451;</span>\r\n                            <span><img src=\"../humidity.png\" /> Humidity <br/>{dataCurrent.day.avghumidity }%</span>\r\n                            <span><img src=\"../icon-wind-blue-white.png\" /> Wind <br/>{dataCurrent.day.maxwind_mph } - {dataCurrent.day.maxwind_kph }km/h</span>\r\n                         </div>\r\n                         <div className=\"weather-location\">\r\n                            <span className=\"top-location\">\r\n                                <img src={objDataCondition.top.icon} />\r\n                            </span>\r\n                            <span className=\"bottom-location\">\r\n                                <img src={objDataCondition.bottom.icon} />\r\n                            </span>\r\n                            <span className=\"center-location\">\r\n                                <img src={objDataCondition.center.icon} />\r\n                            </span>\r\n                            <span className=\"right-location\">\r\n                                <img src={objDataCondition.right.icon}/>\r\n                            </span>\r\n                            <span className=\"left-location\">\r\n                                <img src={objDataCondition.left.icon} />\r\n                            </span>\r\n                         </div>\r\n                        <div className=\"change-section-day\">\r\n                            <span className={session === \"morning\"? 'active': ''} onClick={() => getDataCondition('morning')}>Morning</span>\r\n                            <span className={session === \"afternoon\"? 'active': ''} onClick={() => getDataCondition('afternoon')}>Afternoon</span>\r\n                            <span className={session === \"night\"? 'active': ''} onClick={() => getDataCondition('night')}>Night</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\nexport default MapWeather",{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":91,"column":26,"nodeType":"98","messageId":"99","endLine":91,"endColumn":28},{"ruleId":"100","severity":1,"message":"101","line":138,"column":13,"nodeType":"102","messageId":"103","endLine":138,"endColumn":15},{"ruleId":"100","severity":1,"message":"101","line":169,"column":10,"nodeType":"102","messageId":"103","endLine":169,"endColumn":12},{"ruleId":"100","severity":1,"message":"101","line":170,"column":10,"nodeType":"102","messageId":"103","endLine":170,"endColumn":12},{"ruleId":"104","severity":1,"message":"105","line":243,"column":11,"nodeType":"106","messageId":"107","endLine":243,"endColumn":24},{"ruleId":"104","severity":1,"message":"108","line":249,"column":11,"nodeType":"106","messageId":"107","endLine":249,"endColumn":22},{"ruleId":"104","severity":1,"message":"109","line":255,"column":11,"nodeType":"106","messageId":"107","endLine":255,"endColumn":23},{"ruleId":"104","severity":1,"message":"110","line":274,"column":9,"nodeType":"106","messageId":"107","endLine":274,"endColumn":12},{"ruleId":"96","severity":1,"message":"97","line":280,"column":47,"nodeType":"98","messageId":"99","endLine":280,"endColumn":49},{"ruleId":"104","severity":1,"message":"111","line":2,"column":7,"nodeType":"106","messageId":"107","endLine":2,"endColumn":10},{"ruleId":"112","severity":1,"message":"113","line":19,"column":21,"nodeType":"114","endLine":19,"endColumn":46},{"ruleId":"104","severity":1,"message":"115","line":6,"column":11,"nodeType":"106","messageId":"107","endLine":6,"endColumn":12},{"ruleId":"104","severity":1,"message":"116","line":13,"column":9,"nodeType":"106","messageId":"107","endLine":13,"endColumn":16},{"ruleId":"112","severity":1,"message":"113","line":42,"column":17,"nodeType":"114","endLine":42,"endColumn":51},{"ruleId":"100","severity":1,"message":"117","line":5,"column":59,"nodeType":"102","messageId":"103","endLine":5,"endColumn":61},{"ruleId":"112","severity":1,"message":"113","line":28,"column":45,"nodeType":"114","endLine":28,"endColumn":87},{"ruleId":"112","severity":1,"message":"113","line":33,"column":49,"nodeType":"114","endLine":33,"endColumn":81},{"ruleId":"112","severity":1,"message":"113","line":34,"column":58,"nodeType":"114","endLine":34,"endColumn":87},{"ruleId":"92","replacedBy":"118"},{"ruleId":"94","replacedBy":"119"},{"ruleId":"112","severity":1,"message":"113","line":12,"column":21,"nodeType":"114","endLine":12,"endColumn":61},{"ruleId":"112","severity":1,"message":"113","line":20,"column":25,"nodeType":"114","endLine":20,"endColumn":55},{"ruleId":"112","severity":1,"message":"113","line":26,"column":21,"nodeType":"114","endLine":26,"endColumn":56},{"ruleId":"112","severity":1,"message":"113","line":28,"column":17,"nodeType":"114","endLine":28,"endColumn":49},{"ruleId":"112","severity":1,"message":"113","line":33,"column":35,"nodeType":"114","endLine":33,"endColumn":67},{"ruleId":"112","severity":1,"message":"113","line":34,"column":35,"nodeType":"114","endLine":34,"endColumn":64},{"ruleId":"112","severity":1,"message":"113","line":35,"column":35,"nodeType":"114","endLine":35,"endColumn":76},{"ruleId":"112","severity":1,"message":"113","line":39,"column":33,"nodeType":"114","endLine":39,"endColumn":72},{"ruleId":"112","severity":1,"message":"113","line":42,"column":33,"nodeType":"114","endLine":42,"endColumn":75},{"ruleId":"112","severity":1,"message":"113","line":45,"column":33,"nodeType":"114","endLine":45,"endColumn":75},{"ruleId":"112","severity":1,"message":"113","line":48,"column":33,"nodeType":"114","endLine":48,"endColumn":73},{"ruleId":"112","severity":1,"message":"113","line":51,"column":33,"nodeType":"114","endLine":51,"endColumn":73},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'bottomWeather' is assigned a value but never used.","Identifier","unusedVar","'leftWeather' is assigned a value but never used.","'rightWeather' is assigned a value but never used.","'val' is assigned a value but never used.","'KEY' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'c' is assigned a value but never used.","'dateNow' is assigned a value but never used.","Expected '!==' and instead saw '!='.",["120"],["121"],"no-global-assign","no-unsafe-negation"]